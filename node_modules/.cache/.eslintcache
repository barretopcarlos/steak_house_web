[{"C:\\aulas_react\\steakhouse_web\\src\\index.js":"1","C:\\aulas_react\\steakhouse_web\\src\\reportWebVitals.js":"2","C:\\aulas_react\\steakhouse_web\\src\\App.js":"3","C:\\aulas_react\\steakhouse_web\\src\\components\\Header.js":"4","C:\\aulas_react\\steakhouse_web\\src\\Views\\Main.js":"5","C:\\aulas_react\\steakhouse_web\\src\\Views\\Home.js":"6","C:\\aulas_react\\steakhouse_web\\src\\Views\\Account.js":"7","C:\\aulas_react\\steakhouse_web\\src\\components\\Products.js":"8","C:\\aulas_react\\steakhouse_web\\src\\components\\Register.js":"9","C:\\aulas_react\\steakhouse_web\\src\\components\\Profile.js":"10","C:\\aulas_react\\steakhouse_web\\src\\views\\Main.js":"11","C:\\aulas_react\\steakhouse_web\\src\\views\\Account.js":"12","C:\\aulas_react\\steakhouse_web\\src\\views\\Home.js":"13","C:\\aulas_react\\steakhouse_web\\src\\services\\steakhouseServices.js":"14"},{"size":543,"mtime":1616873268035,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"16"},{"size":700,"mtime":1617472364059,"results":"18","hashOfConfig":"16"},{"size":492,"mtime":1616872329027,"results":"19","hashOfConfig":"16"},{"size":380,"mtime":1616873171116,"results":"20","hashOfConfig":"16"},{"size":406,"mtime":1616871820044,"results":"21","hashOfConfig":"16"},{"size":412,"mtime":1616871810225,"results":"22","hashOfConfig":"16"},{"size":1317,"mtime":1616876502089,"results":"23","hashOfConfig":"16"},{"size":8244,"mtime":1617475397264,"results":"24","hashOfConfig":"16"},{"size":1290,"mtime":1616875406347,"results":"25","hashOfConfig":"16"},{"size":382,"mtime":1617467769390,"results":"26","hashOfConfig":"16"},{"size":283,"mtime":1617467860461,"results":"27","hashOfConfig":"16"},{"size":280,"mtime":1617467882003,"results":"28","hashOfConfig":"16"},{"size":972,"mtime":1617472203527,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"vryyap",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\aulas_react\\steakhouse_web\\src\\index.js",[],["64","65"],"C:\\aulas_react\\steakhouse_web\\src\\reportWebVitals.js",[],"C:\\aulas_react\\steakhouse_web\\src\\App.js",[],"C:\\aulas_react\\steakhouse_web\\src\\components\\Header.js",[],"C:\\aulas_react\\steakhouse_web\\src\\Views\\Main.js",[],"C:\\aulas_react\\steakhouse_web\\src\\Views\\Home.js",[],"C:\\aulas_react\\steakhouse_web\\src\\Views\\Account.js",[],"C:\\aulas_react\\steakhouse_web\\src\\components\\Products.js",["66"],"import React from 'react';\r\nimport { Card, Col, Row } from 'react-materialize';\r\nimport * as services from '../services/steakhouseServices';\r\n\r\nclass Products extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      products: [] //array vazio\r\n    }\r\n\r\n  }\r\n\r\n  componentDidMount() {\r\n    services.getDadosCardapio()\r\n      .then(\r\n        data => {\r\n          this.setState({ products: data });\r\n        }\r\n      )\r\n      .catch(\r\n        e => {\r\n          console.log(e);\r\n        }\r\n      )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <Row>\r\n          <h4><strong>Conheça nossos produtos</strong></h4>\r\n        </Row>\r\n        {\r\n          this.state.products.map(\r\n            function (item, i) {\r\n              return (\r\n                <Row key={i}>\r\n                  <Col m={2}>\r\n                    <img src={services.getApiUrl() + item.foto} className=\"responsive-img\" />\r\n                  </Col>\r\n                  <Col m={10}>\r\n                    <h5><strong>{item.nome}</strong></h5>\r\n                    <p>{item.descricao}</p>\r\n                    <h5>{item.preco}</h5>\r\n                  </Col>\r\n                </Row>\r\n              )\r\n            }\r\n          )\r\n        }\r\n      </Card>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Products;\r\n\r\n\r\n\r\n","C:\\aulas_react\\steakhouse_web\\src\\components\\Register.js",["67"],"import React from 'react';\r\nimport { Row, Card, Input, Button } from 'react-materialize';\r\nimport * as services from '../services/steakhouseServices';\r\n\r\nclass Register extends React.Component {\r\n\r\n  //construtor da classe\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    //declarando o state do componente\r\n    //definindo todos os atributos que o componente irá armazenar\r\n    this.state = {\r\n      nome: '',\r\n      email: '',\r\n      telefone: '',\r\n      senha: '',\r\n      senhaConfirmacao: '',\r\n      result: {\r\n        mensagem_sucesso: '',\r\n        mensagem_erro: '',\r\n        erros_validacao: {\r\n          nome: [],\r\n          email: [],\r\n          telefone: [],\r\n          senha: [],\r\n          senhaConfirmacao: []\r\n        }\r\n      }\r\n    }\r\n\r\n    //forçar o componente a sempre registrar estas funções a cada mudança de state\r\n    //com exceção da função render, todas as funções criadas em um componente que\r\n    //precisam manipular o state devem ser registradas no construtor com 'bind'\r\n    this.handleNome = this.handleNome.bind(this);\r\n    this.handleEmail = this.handleEmail.bind(this);\r\n    this.handleTelefone = this.handleTelefone.bind(this);\r\n    this.handleSenha = this.handleSenha.bind(this);\r\n    this.handleSenhaConfirmacao = this.handleSenhaConfirmacao.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  //funções para capturar o evento change em cada campo\r\n  handleNome(e) { this.setState({ nome: e.target.value }) }\r\n  handleEmail(e) { this.setState({ email: e.target.value }) }\r\n  handleTelefone(e) { this.setState({ telefone: e.target.value }) }\r\n  handleSenha(e) { this.setState({ senha: e.target.value }) }\r\n  handleSenhaConfirmacao(e) { this.setState({ senhaConfirmacao: e.target.value }) }\r\n\r\n  //função para processar o evento SUBMIT do formulário\r\n  handleSubmit(e) {\r\n    e.preventDefault(); //anular o SUBMIT POST do formulário\r\n\r\n    //limpar as mensagens..\r\n    this.setState({\r\n      result: {\r\n        mensagem_sucesso: '', //limpando mensagem de sucesso\r\n        mensagem_erro: '', //limpando mensagem de erro\r\n        erros_validacao: { //limpando erros de validação\r\n          nome: [],\r\n          email: [],\r\n          telefone: [],\r\n          senha: [],\r\n          senhaConfirmacao: []\r\n        }\r\n      }\r\n    });\r\n\r\n    //executando a chamada da API..\r\n    services.postCliente(this.state)\r\n      .then( //promisse de sucesso da API\r\n        data => {\r\n\r\n          //limpar os campos do formulário..\r\n          this.setState({\r\n            nome: '',\r\n            email: '',\r\n            telefone: '',\r\n            senha: '',\r\n            senhaConfirmacao: '',\r\n            result: {\r\n              mensagem_sucesso: data.message\r\n            }\r\n          })\r\n\r\n        }\r\n      )\r\n      .catch( //promisse de erro da API\r\n        e => {\r\n\r\n          var error = e.response;\r\n\r\n          switch (error.status) {\r\n\r\n            case 400:\r\n\r\n              //guardar os erros de validação obtidos da api\r\n              var val = error.data.errors;\r\n\r\n              //armazenar os erros de validação no state\r\n              this.setState({\r\n                result: {\r\n                  erros_validacao: { //limpando erros de validação\r\n                    nome: val.Nome !== undefined ? val.Nome : [],\r\n                    email: val.Email !== undefined ? val.Email : [],\r\n                    telefone: val.Telefone !== undefined ? val.Telefone : [],\r\n                    senha: val.Senha !== undefined ? val.Senha : [],\r\n                    senhaConfirmacao: val.SenhaConfirmacao !== undefined ? val.SenhaConfirmacao : []\r\n                  }\r\n                }\r\n              });\r\n\r\n              break;\r\n\r\n            case 500:\r\n              //exibir mensagem de erro..\r\n              this.setState({\r\n                result: {\r\n                  mensagem_erro: error.data.message\r\n                }\r\n              })\r\n              break;\r\n          }\r\n\r\n        }\r\n      )\r\n  }\r\n\r\n  //função para renderizar o conteudo HTML do componente..\r\n  render() {\r\n    return (\r\n      <Row>\r\n        <Card>\r\n          <h4><strong>Crie sua Conta de Cliente</strong></h4>\r\n\r\n          <h5 className=\"green-text text-darken-4\">\r\n            <strong>{this.state.result.mensagem_sucesso}</strong>\r\n          </h5>\r\n\r\n          <h5 className=\"red-text text-darken-4\">\r\n            <strong>{this.state.result.mensagem_erro}</strong>\r\n          </h5>\r\n\r\n          <br />\r\n\r\n          <form autoComplete=\"false\" method=\"post\" onSubmit={this.handleSubmit}>\r\n\r\n            <Row>\r\n              <Input\r\n                label=\"Nome do Cliente\"\r\n                placeholder=\"Ex: João da Silva\"\r\n                type=\"text\"\r\n                name=\"nome\"\r\n                s={12}\r\n                onChange={this.handleNome}\r\n                value={this.state.nome}\r\n              />\r\n              {\r\n                this.state.result.erros_validacao.nome.map(\r\n                  (msg, i) => (\r\n                    <div key={i} className=\"red-text text-darken-4\" style={{ marginLeft: '10px' }}>\r\n                      {msg}\r\n                    </div>\r\n                  )\r\n                )\r\n              }\r\n            </Row>\r\n\r\n            <Row>\r\n              <Input\r\n                label=\"Email\"\r\n                placeholder=\"Ex: joaodasilva@gmail.com\"\r\n                type=\"email\"\r\n                name=\"email\"\r\n                s={12}\r\n                onChange={this.handleEmail}\r\n                value={this.state.email}\r\n              />\r\n              {\r\n                this.state.result.erros_validacao.email.map(\r\n                  (msg, i) => (\r\n                    <div key={i} className=\"red-text text-darken-4\" style={{ marginLeft: '10px' }}>\r\n                      {msg}\r\n                    </div>\r\n                  )\r\n                )\r\n              }\r\n            </Row>\r\n\r\n            <Row>\r\n              <Input\r\n                label=\"Telefone\"\r\n                placeholder=\"Ex: 21969575900\"\r\n                type=\"text\"\r\n                name=\"telefone\"\r\n                s={12}\r\n                onChange={this.handleTelefone}\r\n                value={this.state.telefone}\r\n              />\r\n              {\r\n                this.state.result.erros_validacao.telefone.map(\r\n                  (msg, i) => (\r\n                    <div key={i} className=\"red-text text-darken-4\" style={{ marginLeft: '10px' }}>\r\n                      {msg}\r\n                    </div>\r\n                  )\r\n                )\r\n              }\r\n            </Row>\r\n\r\n            <Row>\r\n              <Input\r\n                label=\"Senha de Acesso\"\r\n                placeholder=\"Digite aqui\"\r\n                type=\"password\"\r\n                name=\"senha\"\r\n                s={12}\r\n                onChange={this.handleSenha}\r\n                value={this.state.senha}\r\n              />\r\n              {\r\n                this.state.result.erros_validacao.senha.map(\r\n                  (msg, i) => (\r\n                    <div key={i} className=\"red-text text-darken-4\" style={{ marginLeft: '10px' }}>\r\n                      {msg}\r\n                    </div>\r\n                  )\r\n                )\r\n              }\r\n            </Row>\r\n\r\n            <Row>\r\n              <Input\r\n                label=\"Confirme sua Senha\"\r\n                placeholder=\"Digite aqui\"\r\n                type=\"password\"\r\n                name=\"senhaConfirmacao\"\r\n                s={12}\r\n                onChange={this.handleSenhaConfirmacao}\r\n                value={this.state.senhaConfirmacao}\r\n              />\r\n              {\r\n                this.state.result.erros_validacao.senhaConfirmacao.map(\r\n                  (msg, i) => (\r\n                    <div key={i} className=\"red-text text-darken-4\" style={{ marginLeft: '10px' }}>\r\n                      {msg}\r\n                    </div>\r\n                  )\r\n                )\r\n              }\r\n            </Row>\r\n\r\n            <Row>\r\n              <Button\r\n                type=\"submit\"\r\n                className=\"right deep-orange\"\r\n              >\r\n                Realizar Cadastro\r\n            </Button>\r\n            </Row>\r\n\r\n          </form>\r\n\r\n        </Card>\r\n      </Row>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Register;\r\n\r\n\r\n","C:\\aulas_react\\steakhouse_web\\src\\components\\Profile.js",["68"],"import React from 'react';\r\nimport { Row, Card } from 'react-materialize';\r\nimport * as services from '../services/steakhouseServices';\r\n\r\nclass Profile extends React.Component {\r\n\r\n  //construtor\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    //declarando os atributos deste componente\r\n    //atraves da ferramenta 'state'\r\n    this.state = {\r\n      nome: '', //armazenar o nome do restaurante\r\n      foto: '', //armazenar a foto do restaurante\r\n      descricao: '' //armazenar a descrição do restaurante\r\n    };\r\n  }\r\n\r\n  //evento executado antes do componente ser renderizado\r\n  componentDidMount() {\r\n    //executar a consulta na API..\r\n    services.getDadosRestaurante()\r\n      .then( //retorno de sucesso da API..\r\n        data => {\r\n          this.setState({ ...data });\r\n        }\r\n      )\r\n      .catch( //retorno de erro da API..\r\n        e => {\r\n          console.log(e);\r\n        }\r\n      )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <Row>\r\n          <img src={services.getApiUrl() + this.state.foto}\r\n            className=\"responsive-img\"\r\n          />\r\n        </Row>\r\n        <Row>\r\n          {this.state.nome}\r\n        </Row>\r\n        <Row>\r\n          {this.state.descricao}\r\n        </Row>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Profile;\r\n\r\n\r\n","C:\\aulas_react\\steakhouse_web\\src\\views\\Main.js",[],"C:\\aulas_react\\steakhouse_web\\src\\views\\Account.js",["69","70","71"],"import React from 'react';\r\nimport { Row, Col } from 'react-materialize';\r\nimport Profile from '../components/Profile';\r\nimport Register from '../components/Register';\r\n\r\n//declarando um componente como função\r\nconst Account = () => (\r\n    <Register/>\r\n)\r\n\r\nexport default Account;","C:\\aulas_react\\steakhouse_web\\src\\views\\Home.js",["72","73","74"],"\r\nimport React from 'react';\r\nimport { Row, Col } from 'react-materialize';\r\nimport Profile from '../components/Profile';\r\nimport Products from '../components/Products';\r\n\r\n//declarando um componente como função\r\nconst Home = () => (\r\n    <Products />\r\n)\r\n\r\nexport default Home;","C:\\aulas_react\\steakhouse_web\\src\\services\\steakhouseServices.js",[],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":42,"column":21,"nodeType":"81","endLine":42,"endColumn":94},{"ruleId":"82","severity":1,"message":"83","line":93,"column":11,"nodeType":"84","messageId":"85","endLine":123,"endColumn":12},{"ruleId":"79","severity":1,"message":"80","line":40,"column":11,"nodeType":"81","endLine":42,"endColumn":13},{"ruleId":"86","severity":1,"message":"87","line":2,"column":10,"nodeType":"88","messageId":"89","endLine":2,"endColumn":13},{"ruleId":"86","severity":1,"message":"90","line":2,"column":15,"nodeType":"88","messageId":"89","endLine":2,"endColumn":18},{"ruleId":"86","severity":1,"message":"91","line":3,"column":8,"nodeType":"88","messageId":"89","endLine":3,"endColumn":15},{"ruleId":"86","severity":1,"message":"87","line":3,"column":10,"nodeType":"88","messageId":"89","endLine":3,"endColumn":13},{"ruleId":"86","severity":1,"message":"90","line":3,"column":15,"nodeType":"88","messageId":"89","endLine":3,"endColumn":18},{"ruleId":"86","severity":1,"message":"91","line":4,"column":8,"nodeType":"88","messageId":"89","endLine":4,"endColumn":15},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unused-vars","'Row' is defined but never used.","Identifier","unusedVar","'Col' is defined but never used.","'Profile' is defined but never used.","no-global-assign","no-unsafe-negation"]